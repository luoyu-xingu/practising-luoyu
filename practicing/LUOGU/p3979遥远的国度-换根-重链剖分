#include<bits/stdc++.h>

using ll = long long;

std::array<int, 8> dx = {1, -1, 0, 0, 1, -1, 1, -1};
std::array<int, 8> dy = {0, 0, 1, -1, 1, -1, -1, 1};

const int inf = 0x3f3f3f3f;
const ll  Inf = 0x3f3f3f3f3f3f3f3f;

void solve();

int main() {
    std::ios::sync_with_stdio(false);
   // std::cin.tie(nullptr);

    std::cout << std::fixed << std::setprecision(15);

    int t = 1;
//    std::cin >> t;

    while(t--) {
       solve();
    }

    return 0;
}

void solve(){
    int n, m;
    std::cin >> n >> m;

    std::vector e(n + 1, std::vector<int>());
    for (int i = 1; i < n; i++) {
        int u, v;
        std::cin >> u >> v;
        e[u].emplace_back(v);
        e[v].emplace_back(u);
    }

    std::vector<int> a(n + 1);
    for (int i = 1; i <= n; i++) {
        std::cin >> a[i];
    } 

    std::vector<int> dep(n + 1), hson(n + 1), top(n + 1), dfn(n + 1), sze(n + 1), rdfn(n + 1), fa(n + 1);
    auto dfs1 = [&](auto &&self, int u, int f) -> void {
        dep[u] = dep[f] + 1;
        fa[u] = f;
        sze[u] = 1;
        for (auto v : e[u]) {
            if (v == f) {
                continue;
            } 
            self(self, v, u);
            sze[u] += sze[v];
            if (sze[v] > sze[hson[u]]) {
                hson[u] = v;
            }
        }
    };

    dfs1(dfs1, 1, 1);
    
    int cur = 0;
    auto dfs2 = [&](auto &&self, int u, int f) -> void {
        dfn[u] = ++cur;
        rdfn[cur] = u;
        top[u] = f;
        if (!hson[u]) {
            return;
        }

        self(self, hson[u], f);
        for (auto x : e[u]) {
            if (x == fa[u] || x == hson[u]) {
                continue;
            }
            self(self, x, x);
        }
    };

    dfs2(dfs2, 1, 1);

    std::vector<int> l(4 * n + 7), r (4 * n + 7), min(4 * n + 7, INT_MAX), lazy(4 * n + 7);
    auto build = [&](auto &&self, int p, int _l, int _r) -> void {
        l[p] = _l, r[p] = _r; 
        if (_r <= _l) {
            min[p] = a[rdfn[_l]];
            return;
        }

        int mid = (_l + _r) / 2;
        self(self, 2 * p, _l, mid);
        self(self, 2 * p + 1, mid + 1, _r);
        min[p] = std::min(min[p * 2], min[2 * p + 1]);
    };
    build(build,1, 1, n);

    auto push_down = [&](int p) {
        if (lazy[p]) {
            int ls = p << 1;
            int rs = p << 1 | 1;
            min[ls] = min[rs] = lazy[p];
            lazy[ls] = lazy[rs] = lazy[p];
            lazy[p] = 0;
        }
    };

    auto apply = [&](auto &&self, int p, int x, int y, int v) {
        if (y < x) {
            return;
        }
        if (x <= l[p] and y >= r[p]) {
            min[p] = v; 
            lazy[p] = v;
            return;
        }

        push_down(p);
        auto mid = l[p] + r[p] >> 1;
        if (x <= mid) {
            self(self, 2 * p, x, y, v);
        } 
        if (y > mid) {
            self(self, 2 * p + 1, x, y, v);
        }
        min[p] = std::min(min[2 * p], min[2 * p + 1]);
    };

    auto query= [&](auto &&self, int p, int x, int y) {
        if (y < x) {
            return INT_MAX;
        }
        if (x <= l[p] and y >= r[p]) {
            return min[p];
        } 

        push_down(p);
        int mid = l[p] + r[p] >> 1;
        if (y <= mid) {
            return self(self, 2 * p, x, y);
        } 
        if (x > mid) {
            return self(self, 2 * p + 1, x, y);
        }
        int ans = self(self, 2 * p, x, y);
        ans = std::min(ans, self(self, 2 * p + 1, x, y));
        return ans;
    };

    int root;
    std::cin >> root;

    while (m--) {
        int op;
        std::cin >> op;
        if (op == 1) {
            std::cin >> root;
        } else if(op == 2) {
            int x, y, v;
            std::cin >> x >> y >> v;
            while (top[x] != top[y]) {
                if (dep[top[x]] > dep[top[y]]) {
                    apply(apply, 1, dfn[top[x]], dfn[x], v);
                    x = fa[top[x]];
                } else {
                    apply(apply, 1, dfn[top[y]], dfn[y], v);
                    y = fa[top[y]];
                }
            }
            apply(apply, 1, std::min(dfn[x], dfn[y]), std::max(dfn[x], dfn[y]), v);
        } else {
            int u;
            std::cin >> u;
            if (u == root) {
                std::cout << min[1] << "\n";
            } else if (dfn[root] < dfn[u] || dfn[root] > dfn[u] + sze[u] - 1) {
                //std::cout << "mmmm" << root << "\n";
                std::cout << query(query, 1, dfn[u], dfn[u] + sze[u] - 1) << "\n";
            } else {
                int t = root;
                //std::cout << t << "\n";
                while(top[t] != top[u]) {
                    if (fa[top[t]] == u) {
                        t = top[t];
                        break;
                    }
                    t = fa[top[t]];
                }
                if (fa[t] != u) {
                    t = hson[u];
                }

                int ans = query(query, 1, 1, dfn[t] - 1);
                if (dfn[t] + sze[t] <= n) {
                    ans = std::min(ans, query(query, 1, dfn[t] + sze[t], n));
                }
                std::cout << ans << "\n";
            }
            
        }
    }
}
